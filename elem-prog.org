#+AUTHOR: Tobi Lehman <tobi.lehman@gmail.com>
#+TITLE: Notes on Elements of Programming by Alexander Stepanov & Paul McJones
#+HTML_HEAD: <style type="text/css">.org-src-container { overflow-x: scroll; overflow-y: hidden; white-space: nowrap; }; .org-src-container .src { display: inline-block; }; </style>
#+HTML_HEAD_EXTRA: <style type="text/css">img {max-width: 100%}</style>
#+HTML_HEAD_EXTRA: <style type="text/css">body {font-size: 1.25em;}</style>

* Preamble
A good technical book starts by defining the words it uses. This book begins with precise definitions 
of elementary notions in programming such as *value* and *equality*. By not relying on intuition,
the book proceeds to rigorously define and explore the foundations of [[https://en.wikipedia.org/wiki/Generic_programming][generic programming]].
[[https://en.wikipedia.org/wiki/Alexander_Stepanov][One of the authors]] was a creator of the [[https://en.wikipedia.org/wiki/Standard_Template_Library][C++ Standard Template Library]].

This book uses a small subset of C++, focusing on templates and generic programming. It is also
more mathematical than most books about programming. 

Since I majored in mathematics and do software development for a living, I've chosen this book as a focal 
point for actively improving my skills and the quality of the work that I do. The best way for me to get 
the most out the book is to read it carefully, memorize the definitions, prove the lemmas, do the exercises, 
and publish all that work for others to see and criticize. If you have any comments, you can email me or 
submit a pull request on this file: https://github.com/tlehman/elem-prog

I wrote this in [[https://orgmode.org/][org-mode]] in the [[https://www.gnu.org/software/emacs/][Emacs]] text editor. The main benefit is being able to edit and eval code 
directly in the same file as these notes. I export the org text to an html file that uses the [[https://www.mathjax.org/][MathJax]] 
library to render math symbols using LaTeX, it's pretty awesome :)

Success for this note-taking and reading will be if you can get as much out of the book from reading this 
document as I did reading the book and writing this. My goal is distillation of the whole book.
* Chapter 1: Foundations
Programming is all about manipulating objects (e.g. 42), those objects have types (e.g. int),
and those types cluster together into similar concepts (e.g. numbers).
** Entity
*** Abstract entity
An individual thing that is eternal and unchanging. For example, the number 42.
*** Concrete entity
An individual thing that comes into existence in space and time. For example,

#+begin_src C++
int n = 42;
#+end_src

The particular concrete entity ~n~ will only exist as long as it's in scope in the program, then
it will eventually be overwritten.

** Species
*** Abstract species
Describes properties of essentially equivalent abstract entities. Types are examples of species.
*** Concrete species
Describes properties of essentially equivalent concrete entities. Types are examples of species.
** Genus
*** Abstract genus
A set of abstract species with properties in common. Examples: numbers and vector spaces are each genera (plural of genus)
*** Concrete genus
A set of concrete species with properties in common.
** Data
A *datum* is a finite string of ~0~ s and ~1~ s. Data is the plural of datum. A datum corresponding to a particular entity
is said to *represent* that entity.
** Interpretation
The [[Entity][entity]] that corresponds to a datum is the *interpretation* of that datum.
** Values
A *value* is a *datum* together with it's *interpretation*.
** Equality
Two values are *equal* if they refer to the same abstract entity. This may sound circular, but it doesn't have to be, it
reduces equality of values to equality in the mathematical theories those values model. For example, if the ~int~
type models â„¤, the integers, then we can use the definition of equality as equality of integers. Those integers are not
values in our program, they are abstract entities, so there is no circularity, it just "bottoms out" in the Platonic realm.
** Representational equality
Two values are *representationally equal* if they have identical strings of bits.
** Value type
A *value type* is a correspondence between a [[Species][species]] and a set of [[Data][data]].
** Uniquely represented
A [[Value type][value type]] is *uniquely represented* if each [[Data][datum]] corresponds to at most one [[Abstract entity][abstract entity.]]
*** Examples:
Imagine a value type as 3-bit integers that use the first bit as a sign (positive or negative) and the remaining two bits
to store the magnitude, then the set of all possible values are:

| datum | entity |
|   000 |      0 |
|   001 |      1 |
|   010 |      2 |
|   011 |      3 |
|   100 |      0 |
|   101 |     -1 |
|   110 |     -2 |
|   111 |     -3 |

Notice how ~000~ and ~100~ represent 0 and -0, which are the same abstract entity, but different strings of bits, this value
type is therefore not uniquely represented.

Now imagine a [[https://en.wikipedia.org/wiki/Two%27s_complement][twos complement]] integer type:
| datum | entity |
|   000 |      0 |
|   001 |      1 |
|   010 |      2 |
|   011 |      3 |
|   100 |      4 |
|   101 |     -3 |
|   110 |     -2 |
|   111 |     -1 |

Observe that none of the entities are the same, so this value type is uniquely represented.

** Ambiguity
A [[Value type][value type]] is *ambiguous* if there is a datum that has more than one [[Interpretation][interpretation]].
** Lemma 1.1
If a [[Value type][value type]] is [[Uniquely represented][uniquely represented]], then [[Equality][equality]] implies [[Representational equality][representational equality]].
** Lemma 1.2
If a [[Value type][value type]] is [[Ambiguity][unambiguous]], then representational equality implies equality.

* Chapter 2: Transformations and Their Orbits
** Arity
The arity of a function is the number of parameters it takes. For example, $\cos$ has an arity of 1.
The addition function $+$ has an arity of 2, and it takes two numbers $x,y$ and then returns their sum $x+y$.

A function of arity $n$ is called $n$ -ary.

Some common special cases have their own special names, like 1-ary functions are *unary*, and 2-ary functions are *binary*.

** Homogeneous function
Any function where all the arguments have the same type.

** Operations
An *operation* is a [[Homogeneous function][homogeneous function]] of nonzero [[Arity][arity]].

Given a [[Value type][type]] $T$, the function $f : T \times T \times ... \times T \to T$ is an operation.

*** Examples
The familiar operations from arithmetic, like $+$ and $\times$ are operations, as are 

** Transformations
a *transformation* is a [[Arity][unary]] operation

For example, ~square~ is a transformation on ~int~

#+name: square
#+begin_src C++ :tangle square.h :includes <iostream> :namespaces std :flags -std=c++14
template<typename Op>
    requires(BinaryOperation(Op))
Domain(Op) square(const Domain(Op)& x, Op op)
{
    return op(x, x);
}
#+end_src

Where we define ~Domain(.)~ using a macro. Observe that the ~requires(...)~ macro throws away everything, 
it is for documentation purposes only. /In the year 2020, the C++20 standard will provide language-level support 
for ~concepts~ and ~requires~ constraints./

#+name: defs
#+begin_src C++ 
#define Domain(ftype) typename ftype::DomainType
#define requires(...)
#+end_src

An example of the ~ftype~ would be ~BinaryOperation~

Testing out the ~square~ template function applied to ~Op~, and then applied to 2 and 3:

#+name: transformation
#+begin_src C++ 
template <typename T>
struct Transformation {
  typedef T DomainType;
  typedef T ReturnType;
  typedef std::function<T(T)> FuncType;
  Transformation(FuncType fn) {
    this->fn = fn;
  }
  FuncType fn;
  ReturnType operator()(DomainType x) {
    return fn(x);
  };
};
#+end_src

#+name: operations
#+begin_src C++
template <typename T>
struct BinaryOperation {
  typedef T DomainType;
  typedef T ReturnType;
  typedef std::function<T(T,T)> FuncType;
  FuncType fn;
  ReturnType operator()(DomainType x, DomainType y) {
    return fn(x,y);
  };
};
#+end_src

Now we tie it all together and try it out:

#+begin_src C++ :noweb yes :includes <iostream> :namespaces std :flags -std=c++14
<<defs>>
<<square>>
<<operations>>

int main() {
  typedef BinaryOperation<int> Op;
  Op mult;
  mult.fn = [](int a, int b) { return a * b; };

  cout << square<Op>(2, mult) << endl
      << square<Op>(3, mult) << endl
      << square<Op>(4, mult) << endl;
}

#+end_src

RESULTS:

|  4 |
|  9 |
| 16 |

** Orbits
Given a transformation $f$ and a point $x$, we define the orbit as the set $O_{x,f}= \{x, f(x), f(f(x)), ... \}$ 

*** Distance
If $x$ and $y$ are both of type $T$, and the [[Transformations][transformation]] $f$ can be applied finitely many times so that $y = f(f(....f(x)))$, 
then the number of times you have to apply $f$ to $x$ to get $y$ is the *distance* from $x$ to $y$.

We can define the ~distance~ function in C++ like so:

#+name: distance
#+begin_src C++ :noweb yes :tangle yes
template<typename F>
    requires(Transformation(F))
DistanceType(F) distance(Domain(F) x, Domain(F) y, F f)
{
  // Precondition: y is reachable from x under f
  typedef DistanceType(F) N;
  N n(0);
  while(x != y) {
    x = f(x);
    n = n + N(1);
  }
  return n;
}
#+end_src

The ~DistanceType(F)~ type is defined to be any integer type that is exactly large enough to hold the distance between any two points ~x~ and 
~y~. Given a type $T$ with finitely many values of that type, the maximum distance with respect to a [[Transformations][transformation]] $f : T \to T$ would have 
to be the number of values of type $T$.

In C++, we can use [[https://en.cppreference.com/w/cpp/types/size_t][~std::size_t~]] to define our ~DistanceType~:
   
#+name: dtype
#+begin_src C++ :noweb yes :tangle yes
#define DistanceType(ftype) std::size_t
#+end_src

Now let's define a particular transformation and compute the distance between two points. Let the transformation be the increment function on 
the integers: $\text{inc} : \mathbb{Z} \to \mathbb{Z}$, then the distance between 13 and 23 should be 10.

#+begin_src C++ :noweb yes :includes <iostream> :namespaces std :flags -std=c++14
<<dtype>>
<<defs>>
<<transformation>>
<<distance>>

int main() {
  typedef Transformation<int> F;
  F inc([](int a) { return a+1; });

  cout << distance(13, 23, inc) << endl;
  return 0;
}
#+end_src

RESULTS:
10

As expected, we got 10. Next we move on to collision points.

** Collision points
If an orbit is finite, then we can find the point where a transformation $f$ loops back 
on itself by running two sequences, one at 1x speed and one at 2x speed. We seek the 
smallest $n$ such that $f^n(x) = f^{2n + 1}(x)$. A more detailed discussion of the algorithm 
is in the book, for here I include the C++ code, and test it out on several transformations, 
and do some of the exercises to modify and apply this code.

#+name: collision_point
#+begin_src C++ :noweb yes :includes <iostream> :namespaces std :flags -std=c++14
template<typename F, typename P>
  requires(Transformation(F) && UnaryPredicate(P))
Domain(F) collision_point(const Domain(F)& x, F f, P p) {
  // Precondition: p(x) and f(x) are defined
  if(!p(x)) return x; 
  Domain(F) slow = x;
  Domain(F) fast = f(x);
  while(fast != slow) {
    slow = f(slow);
    if(!p(fast)) return fast;
    fast = f(fast);
    if(!p(fast)) return fast;
    fast = f(fast);
  }
  return fast;
}
#+end_src

If the orbit is nonterminating for a particular element $x$, then we can specialize the ~collision_point~ algorithm:

#+name: collision_point_nonterminating_orbit
#+begin_src C++ :noweb yes :includes <iostream> :namespaces std :flags -std=c++14
template<typename F>
  requires(Transformation(F))
Domain(F) collision_point_nonterminating_orbit(const Domain(F)& x, F f) {
  Domain(F) slow = x;
  Domain(F) fast = f(x);

  while(fast != slow) {
    slow = f(slow);
    fast = f(fast);
    fast = f(fast);
  }
  return fast;
  // Postconditon: return value is a collision point
}
#+end_src

To test this out, let's consider a simple transformation, that of incrementing an integer and taking the remainder modulo 13.

#+name: inc
#+begin_src C++ :noweb yes :includes <iostream> :namespaces std :flags -std=c++14
typedef Transformation<int> F;
F inc([](int a) { return (a+1) % 13; });
#+end_src

If we take the number 6, and then apply the transformation 6 times, we reach 12, applying it again we get 0, so the distance 
between 6 and 0 should be (6 + 1) = 7

*** testing ~distance~ with ~inc~ 

#+begin_src C++ :noweb yes :includes <iostream> :namespaces std :flags -std=c++14
<<dtype>>
<<defs>>
<<transformation>>
<<distance>>

int main() {
  <<inc>>
  cout << distance(6, 0, inc) << endl;
  return 0;
}
#+end_src

RESULTS:
7

Works correctly! Now let's move on to finding the collision point:

*** testing ~collision_point~ using ~inc~ 

If we take our ~inc~ operation and imagine playing out the collision finding algorithm starting at 0, fast takes 6 steps to get to 12, slow is at 5.
After 7 more steps, slow is at 12, and fast has gone (1+6) to hit 12 again. The call will look like this:

#+name: test_collision_inc
#+begin_src C++
collision_point_nonterminating_orbit(0, inc);
#+end_src

And we expect the result to be 12. Weaving all the code together:

#+begin_src C++ :noweb yes :includes <iostream> :namespaces std :flags -std=c++14
<<defs>>
<<transformation>>
<<collision_point_nonterminating_orbit>>

int main() {
  <<inc>>
  cout << collision_point_nonterminating_orbit(0, inc) << endl;
  return 0;
}
#+end_src

Beautiful! Next we should take a detour and make some visualizations. Since I'm a nerd I will of course do this with [[http://graphviz.org][Graphviz]].

** Visualizing orbits!

Our implementation of the [[Transformations][transformation]] type is flexible enough to allow for wrapping ~inc~ and producing some output along the way:

#+name: inc_dot
#+begin_src C++ :noweb yes :includes <iostream> :namespaces std :flags -std=c++14
typedef Transformation<int> F;
  
F inc([](int a) {
    int fa = (a+1) % 13; 
    cout << a << "->" << fa << "; ";
    return fa;
});
#+end_src

Now we re-run the previous program with the new ~inc~

#+begin_src C++ :noweb yes :tangle collision_point.cpp :includes <iostream> :namespaces std :flags -std=c++14 
<<defs>>
<<transformation>>
<<collision_point_nonterminating_orbit>>

int main() {
  <<inc_dot>>
  cout << collision_point_nonterminating_orbit(0, inc) << endl;
  return 0;
}
#+end_src

In emacs, run ~org-bable-tangle~ Then eval this next src block:

#+begin_src sh
g++ collision_point.cpp -std=c++14; echo "strict digraph { $(./a.out) }" | circo -Tpng > inc_13.png
#+end_src

file:inc_13.png

Not all orbits will be perfectly circular, consider the ~inc~ function on the integers, it never terminates. 
Also, consider ~half~ which takes the half of an integer using [[http://mathworld.wolfram.com/IntegerDivision.html][integer division]]. ~half~ always terminates 
at 0, meaning that there is no collision point for either of those orbits.

There's a fourth possibility, that there is a "handle" and then a nice circular orbit. Let's find an example 
and illustrate is using our neat Graphviz trick.

#+name: handle_tx
#+begin_src C++
typedef Transformation<int> F;
  
F handle_tx([](int a) {
    int fa = (a < 4) ? a+1 : (a%5 + 4);
    cout << a << "->" << fa << "; ";
    return fa;
});
#+end_src

Now we re-run the previous program with ~handle_tx~ in place of ~inc~

#+begin_src C++ :noweb yes :tangle collision_point_handle.cpp :includes <iostream> :namespaces std :flags -std=c++14 
<<defs>>
<<transformation>>
<<collision_point_nonterminating_orbit>>

int main() {
  <<handle_tx>>
  cout << collision_point_nonterminating_orbit(0, handle_tx) << endl;
  return 0;
}
#+end_src

#+begin_src sh
g++ collision_point_handle.cpp -std=c++14; echo "strict digraph { $(./a.out) }" | circo -Tpng > handle_tx.png
#+end_src

file:handle_tx.png

** Lemma 2.4
Let $o$ be the orbit size, $h$ the handle size, and $c$ the cycle size.

$o = h + c$

*** Proof 
Suppose there was a point $x$ in the orbit that was neither in the handle nor in the cycle.

Let $y$ be any point on the cycle, there can't be any path from $y$ to $x$, since the cycle 
property would require that there is a path from $x$ back to $y$. 

Let $z$ be a point on the handle, there can't be any path from $z$ to $x$, since that would 
mean $x$ is part of the handle, or the cycle, both are forbidden by definition. There is no 
where left that $x$ could go, which means that $o = h + c$.

** Connection points
Earlier we explored the [[Collision points][collision point]] where $f^{n}(x) = f^{2n+1}$. That tells us that the orbit has a cycle, but 
if we want to know how big the handle is (the number $h$), then we need to do more. In the book, there is a proof 
that taking $h+1$ steps past the collision point visits the same point as taking $h$ steps past $x$. 

$f^h(x) = f^{h+1}(y)$ where $y$ is the collision point.

Since we don't know $h$, we use this proof to run two sequences $\{x, f(x), \cdots\}$ and $\{f(y), f(f(y)), \cdots\}$ forward 
until they converge, we call this the *convergent point*. By the proof in the book, we also know that this is the *connection point* 
between the handle and the cycle.

#+name: convergent_point
#+begin_src C++
template <typename F>
  requires(Transformation(F))
Domain(F) convergent_point(Domain(F) x0, Domain(F) x1, F f) {
  while(x0 != x1) {
    x0 = f(x0);
    x1 = f(x1);
  }
  return x0;
} 
#+end_src

Then we can apply the ~convergent_point~ function to find the *connection point* of the orbit starting at $x$:

#+name: connection_point_nonterminating_orbit
#+begin_src C++ :noweb yes
template <typename F>
  requires(Transformation(F))
Domain(F) connection_point_nonterminating_orbit(const Domain(F)& x, F f) {
  Domain(F) y = collision_point_nonterminating_orbit(x, f);
  return convergent_point(x, f(y), f);
} 
#+end_src

#+RESULTS: connection_point_nonterminating_orbit

*** testing out ~connection_point~ on the ~handle_tx~ transformation
Earlier we defined ~handle_tx~ and visualised it's orbit structure, it looks like this: 

#+name: handle_tx_nooutput
#+begin_src C++
typedef Transformation<int> F;
  
F handle_tx([](int a) {
    int fa = (a < 4) ? a+1 : (a%5 + 4);
    return fa;
});
#+end_src

file:handle_tx.png

From the image above, you can see that 4 is the connection point, let's try it out!


#+begin_src C++ :noweb yes :tangle connection_point.cpp :includes <iostream> :namespaces std :flags -std=c++14 
<<defs>>
<<transformation>>
<<collision_point_nonterminating_orbit>>
<<convergent_point>>
<<connection_point_nonterminating_orbit>>

int main() {
  <<handle_tx_nooutput>>
  cout << connection_point_nonterminating_orbit(0, handle_tx) << endl;
  return 0;
}
#+end_src

RESULTS:
4


